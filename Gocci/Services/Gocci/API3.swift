//
//   API3.swift 
//   created by Markus Wanke 
//   created on 2015-10-22 15:05:19.548737
//
//   WARNING======================================WARNING
//   WARNING                                      WARNING
//   WARNING      THIS FILE WAS AUTOGENERATED     WARNING
//   WARNING       NEVER EVER EDIT THIS FILE      WARNING
//   WARNING       ALWAYS GENERATE A NEW ONE      WARNING
//   WARNING                                      WARNING
//   WARNING======================================WARNING
//


import Foundation



class API3 {
    static let baseurl = "https://api.gocci.me/v1/mobile"
    static let testurl = "http://test.api.gocci.me/v1/mobile"
    
    
    enum GlobalCode {
        case SUCCESS
        case ERROR_UNKNOWN_ERROR
        case ERROR_SESSION_EXPIRED
        case ERROR_CLIENT_OUTDATED
        case ERROR_NO_INTERNET_CONNECTION
        case ERROR_CONNECTION_FAILED
        case ERROR_CONNECTION_TIMEOUT
        case ERROR_SERVER_SIDE_FAILURE
        case ERROR_NO_DATA_RECIEVED
        case ERROR_BASEFRAME_JSON_MALFORMED
    }
    
    static let globalErrorReverseLookupTable: [String: GlobalCode] = [
        "ERROR_SESSION_EXPIRED": .ERROR_SESSION_EXPIRED,
        "ERROR_CLIENT_OUTDATED": .ERROR_CLIENT_OUTDATED,
        "SUCCESS": .SUCCESS,
        "ERROR_SERVER_SIDE_FAILURE": .ERROR_SERVER_SIDE_FAILURE,
        "ERROR_NO_INTERNET_CONNECTION": .ERROR_NO_INTERNET_CONNECTION,
        "ERROR_UNKNOWN_ERROR": .ERROR_UNKNOWN_ERROR,
        "ERROR_CONNECTION_FAILED": .ERROR_CONNECTION_FAILED,
        "ERROR_NO_DATA_RECIEVED": .ERROR_NO_DATA_RECIEVED,
        "ERROR_CONNECTION_TIMEOUT": .ERROR_CONNECTION_TIMEOUT,
        "ERROR_BASEFRAME_JSON_MALFORMED": .ERROR_BASEFRAME_JSON_MALFORMED,
    ]
    
    static let globalErrorMessageTable: [GlobalCode: String] = [
        .ERROR_SESSION_EXPIRED: 
    		"Session cookie is not valid anymore",
        .ERROR_CLIENT_OUTDATED: 
    		"The client version is too old for this API. Client update necessary",
        .SUCCESS: 
    		"Successful API request",
        .ERROR_SERVER_SIDE_FAILURE: 
    		"HTTP status differed from 200, indicationg failure on the server side",
        .ERROR_NO_INTERNET_CONNECTION: 
    		"The device appreas to be not connected to the internet",
        .ERROR_UNKNOWN_ERROR: 
    		"Unknown global error",
        .ERROR_CONNECTION_FAILED: 
    		"Server connection failed",
        .ERROR_NO_DATA_RECIEVED: 
    		"Connection successful but no data recieved",
        .ERROR_CONNECTION_TIMEOUT: 
    		"Timeout reached before request finished",
        .ERROR_BASEFRAME_JSON_MALFORMED: 
    		"JSON response baseframe not parsable",
    ]
    
    
    class func on_SUCCESS(perform:(GlobalCode, String)->()) {
        globalErrorMapping[.SUCCESS] = perform
    }
    class func on_ERROR_UNKNOWN_ERROR(perform:(GlobalCode, String)->()) {
        globalErrorMapping[.ERROR_UNKNOWN_ERROR] = perform
    }
    class func on_ERROR_SESSION_EXPIRED(perform:(GlobalCode, String)->()) {
        globalErrorMapping[.ERROR_SESSION_EXPIRED] = perform
    }
    class func on_ERROR_CLIENT_OUTDATED(perform:(GlobalCode, String)->()) {
        globalErrorMapping[.ERROR_CLIENT_OUTDATED] = perform
    }
    class func on_ERROR_NO_INTERNET_CONNECTION(perform:(GlobalCode, String)->()) {
        globalErrorMapping[.ERROR_NO_INTERNET_CONNECTION] = perform
    }
    class func on_ERROR_CONNECTION_FAILED(perform:(GlobalCode, String)->()) {
        globalErrorMapping[.ERROR_CONNECTION_FAILED] = perform
    }
    class func on_ERROR_CONNECTION_TIMEOUT(perform:(GlobalCode, String)->()) {
        globalErrorMapping[.ERROR_CONNECTION_TIMEOUT] = perform
    }
    class func on_ERROR_SERVER_SIDE_FAILURE(perform:(GlobalCode, String)->()) {
        globalErrorMapping[.ERROR_SERVER_SIDE_FAILURE] = perform
    }
    class func on_ERROR_NO_DATA_RECIEVED(perform:(GlobalCode, String)->()) {
        globalErrorMapping[.ERROR_NO_DATA_RECIEVED] = perform
    }
    class func on_ERROR_BASEFRAME_JSON_MALFORMED(perform:(GlobalCode, String)->()) {
        globalErrorMapping[.ERROR_BASEFRAME_JSON_MALFORMED] = perform
    }
    
    
    static var globalErrorMapping: [GlobalCode: (GlobalCode, String)->()] = [:]
    static var onUnhandledError: (GlobalCode, String)->() = { print("FATAL: UNHANDLED API ERROR: \($0): \($1)") }
    
    class func on(gcode: GlobalCode, perform:(GlobalCode, String)->()) {
        globalErrorMapping[gcode] = perform
    }
    
    class auth {
    
        class pass_login: APIRequestProtocol {
            let apipath = "/auth/pass_login"
            
            class InternalParameterClass {
                var username: String?
                var pass: String?
                var os: String?
                var ver: String?
                var model: String?
                var register_id: String?
                
            }
            
            let parameters = InternalParameterClass()
            
            
            var localErrorMapping: [LocalCode: (LocalCode, String)->()] = [:]
            
            var onUnhandledError: (LocalCode, String)->() = { print("FATAL: UNHANDLED API ERROR: \($0): \($1)") }
            
            enum LocalCode {
                case ERROR_USERNAME_NOT_REGISTERD
                case ERROR_PASSWORD_WRONG
                case ERROR_REGISTER_ID_ALREADY_REGISTERD
                case ERROR_PARAMETER_USERNAME_MISSING
                case ERROR_PARAMETER_USERNAME_MALFORMED
                case ERROR_PARAMETER_PASS_MISSING
                case ERROR_PARAMETER_PASS_MALFORMED
                case ERROR_PARAMETER_OS_MISSING
                case ERROR_PARAMETER_OS_MALFORMED
                case ERROR_PARAMETER_VER_MISSING
                case ERROR_PARAMETER_VER_MALFORMED
                case ERROR_PARAMETER_MODEL_MISSING
                case ERROR_PARAMETER_MODEL_MALFORMED
                case ERROR_PARAMETER_REGISTER_ID_MISSING
                case ERROR_PARAMETER_REGISTER_ID_MALFORMED
                case ERROR_RESPONSE__USER_ID_MISSING
                case ERROR_RESPONSE__USER_ID_MALFORMED
                case ERROR_RESPONSE__USERNAME_MISSING
                case ERROR_RESPONSE__USERNAME_MALFORMED
                case ERROR_RESPONSE__PROFILE_IMG_MISSING
                case ERROR_RESPONSE__PROFILE_IMG_MALFORMED
                case ERROR_RESPONSE__IDENTITY_ID_MISSING
                case ERROR_RESPONSE__IDENTITY_ID_MALFORMED
                case ERROR_RESPONSE__BADGE_NUM_MISSING
                case ERROR_RESPONSE__BADGE_NUM_MALFORMED
                case ERROR_RESPONSE__TOKEN_MISSING
                case ERROR_RESPONSE__TOKEN_MALFORMED
            }
            
            class Payload {
                var user_id: String!
                var username: String!
                var profile_img: String!
                var identity_id: String!
                var badge_num: String!
                var token: String!
            }
            
            static let localErrorMessageTable: [LocalCode: String] = {
                var res: [LocalCode: String] = [:]
                res[.ERROR_PASSWORD_WRONG] = 
                    "Password wrong"
                res[.ERROR_PARAMETER_VER_MALFORMED] = 
                    "Parameter 'ver' is malformed. Should correspond to '^[0-9]+$'"
                res[.ERROR_RESPONSE__BADGE_NUM_MALFORMED] = 
                    "Response 'badge_num' is malformed. Should correspond to '^[0-9]+$'"
                res[.ERROR_RESPONSE__IDENTITY_ID_MALFORMED] = 
                    "Response 'identity_id' is malformed. Should correspond to '^us-east-1:[a-f0-9]{8}(-[a-f0-9]{4}){3}-[a-f0-9]{12}$'"
                res[.ERROR_RESPONSE__PROFILE_IMG_MISSING] = 
                    "Response 'profile_img' was not received"
                res[.ERROR_PARAMETER_VER_MISSING] = 
                    "Parameter 'ver' does not exist."
                res[.ERROR_PARAMETER_USERNAME_MALFORMED] = 
                    "Parameter 'username' is malformed. Should correspond to '^\\w{4,20}$'"
                res[.ERROR_RESPONSE__TOKEN_MISSING] = 
                    "Response 'token' was not received"
                res[.ERROR_PARAMETER_OS_MALFORMED] = 
                    "Parameter 'os' is malformed. Should correspond to '^android$|^iOS$'"
                res[.ERROR_RESPONSE__USERNAME_MISSING] = 
                    "Response 'username' was not received"
                res[.ERROR_RESPONSE__BADGE_NUM_MISSING] = 
                    "Response 'badge_num' was not received"
                res[.ERROR_PARAMETER_MODEL_MISSING] = 
                    "Parameter 'model' does not exist."
                res[.ERROR_RESPONSE__IDENTITY_ID_MISSING] = 
                    "Response 'identity_id' was not received"
                res[.ERROR_PARAMETER_PASS_MALFORMED] = 
                    "Parameter 'pass' is malformed. Should correspond to '^\\w{6,25}$'"
                res[.ERROR_PARAMETER_USERNAME_MISSING] = 
                    "Parameter 'username' does not exist."
                res[.ERROR_REGISTER_ID_ALREADY_REGISTERD] = 
                    "This deviced already has an registerd other account"
                res[.ERROR_PARAMETER_REGISTER_ID_MALFORMED] = 
                    "Parameter 'register_id' is malformed. Should correspond to '^([a-f0-9]{64})|([a-zA-Z0-9:_-]{140,250})$'"
                res[.ERROR_PARAMETER_MODEL_MALFORMED] = 
                    "Parameter 'model' is malformed. Should correspond to '^[a-zA-Z0-9_-]{0,10}$'"
                res[.ERROR_RESPONSE__PROFILE_IMG_MALFORMED] = 
                    "Response 'profile_img' is malformed. Should correspond to '^http\\S+$'"
                res[.ERROR_RESPONSE__USERNAME_MALFORMED] = 
                    "Response 'username' is malformed. Should correspond to '^\\w{4,20}$'"
                res[.ERROR_PARAMETER_REGISTER_ID_MISSING] = 
                    "Parameter 'register_id' does not exist."
                res[.ERROR_RESPONSE__USER_ID_MISSING] = 
                    "Response 'user_id' was not received"
                res[.ERROR_PARAMETER_PASS_MISSING] = 
                    "Parameter 'pass' does not exist."
                res[.ERROR_USERNAME_NOT_REGISTERD] = 
                    "The entered username does not exist"
                res[.ERROR_RESPONSE__TOKEN_MALFORMED] = 
                    "Response 'token' is malformed. Should correspond to '^[a-zA-Z0-9.-_]{400,2200}$'"
                res[.ERROR_RESPONSE__USER_ID_MALFORMED] = 
                    "Response 'user_id' is malformed. Should correspond to '^[0-9]+$'"
                res[.ERROR_PARAMETER_OS_MISSING] = 
                    "Parameter 'os' does not exist."
                return res
            }()
            
            
            static let localErrorReverseLookupTable: [String: LocalCode] = {
                var res: [String: LocalCode] = [:]
                res["ERROR_USERNAME_NOT_REGISTERD"] = .ERROR_USERNAME_NOT_REGISTERD
                res["ERROR_PASSWORD_WRONG"] = .ERROR_PASSWORD_WRONG
                res["ERROR_REGISTER_ID_ALREADY_REGISTERD"] = .ERROR_REGISTER_ID_ALREADY_REGISTERD
                res["ERROR_PARAMETER_USERNAME_MISSING"] = .ERROR_PARAMETER_USERNAME_MISSING
                res["ERROR_PARAMETER_USERNAME_MALFORMED"] = .ERROR_PARAMETER_USERNAME_MALFORMED
                res["ERROR_PARAMETER_PASS_MISSING"] = .ERROR_PARAMETER_PASS_MISSING
                res["ERROR_PARAMETER_PASS_MALFORMED"] = .ERROR_PARAMETER_PASS_MALFORMED
                res["ERROR_PARAMETER_OS_MISSING"] = .ERROR_PARAMETER_OS_MISSING
                res["ERROR_PARAMETER_OS_MALFORMED"] = .ERROR_PARAMETER_OS_MALFORMED
                res["ERROR_PARAMETER_VER_MISSING"] = .ERROR_PARAMETER_VER_MISSING
                res["ERROR_PARAMETER_VER_MALFORMED"] = .ERROR_PARAMETER_VER_MALFORMED
                res["ERROR_PARAMETER_MODEL_MISSING"] = .ERROR_PARAMETER_MODEL_MISSING
                res["ERROR_PARAMETER_MODEL_MALFORMED"] = .ERROR_PARAMETER_MODEL_MALFORMED
                res["ERROR_PARAMETER_REGISTER_ID_MISSING"] = .ERROR_PARAMETER_REGISTER_ID_MISSING
                res["ERROR_PARAMETER_REGISTER_ID_MALFORMED"] = .ERROR_PARAMETER_REGISTER_ID_MALFORMED
                res["ERROR_RESPONSE__USER_ID_MISSING"] = .ERROR_RESPONSE__USER_ID_MISSING
                res["ERROR_RESPONSE__USER_ID_MALFORMED"] = .ERROR_RESPONSE__USER_ID_MALFORMED
                res["ERROR_RESPONSE__USERNAME_MISSING"] = .ERROR_RESPONSE__USERNAME_MISSING
                res["ERROR_RESPONSE__USERNAME_MALFORMED"] = .ERROR_RESPONSE__USERNAME_MALFORMED
                res["ERROR_RESPONSE__PROFILE_IMG_MISSING"] = .ERROR_RESPONSE__PROFILE_IMG_MISSING
                res["ERROR_RESPONSE__PROFILE_IMG_MALFORMED"] = .ERROR_RESPONSE__PROFILE_IMG_MALFORMED
                res["ERROR_RESPONSE__IDENTITY_ID_MISSING"] = .ERROR_RESPONSE__IDENTITY_ID_MISSING
                res["ERROR_RESPONSE__IDENTITY_ID_MALFORMED"] = .ERROR_RESPONSE__IDENTITY_ID_MALFORMED
                res["ERROR_RESPONSE__BADGE_NUM_MISSING"] = .ERROR_RESPONSE__BADGE_NUM_MISSING
                res["ERROR_RESPONSE__BADGE_NUM_MALFORMED"] = .ERROR_RESPONSE__BADGE_NUM_MALFORMED
                res["ERROR_RESPONSE__TOKEN_MISSING"] = .ERROR_RESPONSE__TOKEN_MISSING
                res["ERROR_RESPONSE__TOKEN_MALFORMED"] = .ERROR_RESPONSE__TOKEN_MALFORMED
                return res
            }()
            
            
            
            func preHandleLocalError(code: String, _ mmsg: String? = nil) -> Bool {
                guard code == "SUCCESS" else {
                    guard let rcode = pass_login.localErrorReverseLookupTable[code] else {
                        APISupport.handleCommunicationFailure(.ERROR_UNKNOWN_ERROR, emsg: mmsg)
                        return false
                    }
                    handleLocalError(rcode, mmsg)
                    return false
                }
                return true
            }
            
            func handleLocalError(code: LocalCode, _ mmsg: String? = nil) {
                let msg = mmsg ?? pass_login.localErrorMessageTable[code] ?? "No error message defined"
                let handler = self.localErrorMapping[code] ?? self.onUnhandledError
                dispatch_async(dispatch_get_main_queue()) {
                    handler(code, msg)
                }
            }
            
            func validateSimpleResponse(json: [String: AnyObject], _ value: String, _ regex: String, _ misErr: LocalCode, _ malErr: LocalCode ) -> String? {
                if let value = (json as? [String: String])?[value] {
                    if !APISupport.matches(value, re: regex) {
                        handleLocalError(malErr)
                        return nil
                    }
                    else {
                        return value
                    }
                }
                else {
                    handleLocalError(misErr)
                    return nil
                }
            }
            
            func validateSimpleArrayResponse(json: [String: AnyObject], _ value: String, _ regex: String, _ misErr: LocalCode, _ malErr: LocalCode ) -> [String]? {
                if let values = (json as? [String: [String!]])?[value] {
                    var res: [String] = []
                    for value in values {
                        if !APISupport.matches(value, re: regex) {
                            handleLocalError(malErr)
                            return nil
                        }
                        else {
                            res.append(value)
                        }
                    }
                    return res
                }
                else {
                    handleLocalError(misErr)
                    return nil
                }
            }
            
            
            
            func perform(and: (payload: Payload)->()) {
                APISupport.performNetworkRequest(self) { (code, msg, rawJSON) in
                    if self.preHandleLocalError(code, msg) {
                        if let payload = self.validateResponse(rawJSON) {
                            dispatch_async(dispatch_get_main_queue()) {
                                and(payload: payload)
                            }
                        }
                    }
                }
            }
            func on(code: LocalCode, perform: (LocalCode, String)->()){
                self.localErrorMapping[code] = perform
            }
            
            
            func on_ERROR_USERNAME_NOT_REGISTERD(perform:(LocalCode, String)->()) {
                localErrorMapping[.ERROR_USERNAME_NOT_REGISTERD] = perform
            }
            func on_ERROR_PASSWORD_WRONG(perform:(LocalCode, String)->()) {
                localErrorMapping[.ERROR_PASSWORD_WRONG] = perform
            }
            func on_ERROR_REGISTER_ID_ALREADY_REGISTERD(perform:(LocalCode, String)->()) {
                localErrorMapping[.ERROR_REGISTER_ID_ALREADY_REGISTERD] = perform
            }
            
            
            func validateParameterPairs() -> [String: String]? {
            
                var res: [String: String] = [:]
            
                
                if let username = parameters.username {
                    if APISupport.matches(username, re: "^\\w{4,20}$") {
                        res["username"] = username
                    }
                    else {
                        handleLocalError(.ERROR_PARAMETER_USERNAME_MALFORMED)
                        return nil
                    }
                }
                else {
                    handleLocalError(.ERROR_PARAMETER_USERNAME_MISSING)
                    return nil
                }
                
                if let pass = parameters.pass {
                    if APISupport.matches(pass, re: "^\\w{6,25}$") {
                        res["pass"] = pass
                    }
                    else {
                        handleLocalError(.ERROR_PARAMETER_PASS_MALFORMED)
                        return nil
                    }
                }
                else {
                    handleLocalError(.ERROR_PARAMETER_PASS_MISSING)
                    return nil
                }
                
                if let os = parameters.os {
                    if APISupport.matches(os, re: "^android$|^iOS$") {
                        res["os"] = os
                    }
                    else {
                        handleLocalError(.ERROR_PARAMETER_OS_MALFORMED)
                        return nil
                    }
                }
                else {
                    handleLocalError(.ERROR_PARAMETER_OS_MISSING)
                    return nil
                }
                
                if let ver = parameters.ver {
                    if APISupport.matches(ver, re: "^[0-9]+$") {
                        res["ver"] = ver
                    }
                    else {
                        handleLocalError(.ERROR_PARAMETER_VER_MALFORMED)
                        return nil
                    }
                }
                else {
                    handleLocalError(.ERROR_PARAMETER_VER_MISSING)
                    return nil
                }
                
                if let model = parameters.model {
                    if APISupport.matches(model, re: "^[a-zA-Z0-9_-]{0,10}$") {
                        res["model"] = model
                    }
                    else {
                        handleLocalError(.ERROR_PARAMETER_MODEL_MALFORMED)
                        return nil
                    }
                }
                else {
                    handleLocalError(.ERROR_PARAMETER_MODEL_MISSING)
                    return nil
                }
                
                if let register_id = parameters.register_id {
                    if APISupport.matches(register_id, re: "^([a-f0-9]{64})|([a-zA-Z0-9:_-]{140,250})$") {
                        res["register_id"] = register_id
                    }
                    else {
                        handleLocalError(.ERROR_PARAMETER_REGISTER_ID_MALFORMED)
                        return nil
                    }
                }
                else {
                    handleLocalError(.ERROR_PARAMETER_REGISTER_ID_MISSING)
                    return nil
                }
            
                return res
            }
            
            
            func validateResponse(json: [String: AnyObject]) -> Payload? {
                let payload = Payload()
            
                payload.user_id = validateSimpleResponse(json, "user_id", "^[0-9]+$",
                     .ERROR_RESPONSE__USER_ID_MISSING, .ERROR_RESPONSE__USER_ID_MALFORMED)
                if payload.user_id == nil { return nil }
                
                payload.username = validateSimpleResponse(json, "username", "^\\w{4,20}$",
                     .ERROR_RESPONSE__USERNAME_MISSING, .ERROR_RESPONSE__USERNAME_MALFORMED)
                if payload.username == nil { return nil }
                
                payload.profile_img = validateSimpleResponse(json, "profile_img", "^http\\S+$",
                     .ERROR_RESPONSE__PROFILE_IMG_MISSING, .ERROR_RESPONSE__PROFILE_IMG_MALFORMED)
                if payload.profile_img == nil { return nil }
                
                payload.identity_id = validateSimpleResponse(json, "identity_id", "^us-east-1:[a-f0-9]{8}(-[a-f0-9]{4}){3}-[a-f0-9]{12}$",
                     .ERROR_RESPONSE__IDENTITY_ID_MISSING, .ERROR_RESPONSE__IDENTITY_ID_MALFORMED)
                if payload.identity_id == nil { return nil }
                
                payload.badge_num = validateSimpleResponse(json, "badge_num", "^[0-9]+$",
                     .ERROR_RESPONSE__BADGE_NUM_MISSING, .ERROR_RESPONSE__BADGE_NUM_MALFORMED)
                if payload.badge_num == nil { return nil }
                
                payload.token = validateSimpleResponse(json, "token", "^[a-zA-Z0-9.-_]{400,2200}$",
                     .ERROR_RESPONSE__TOKEN_MISSING, .ERROR_RESPONSE__TOKEN_MALFORMED)
                if payload.token == nil { return nil }
                
            
                return payload
            }
            
            
        }
        
        class login: APIRequestProtocol {
            let apipath = "/auth/login"
            
            class InternalParameterClass {
                var identity_id: String?
                
            }
            
            let parameters = InternalParameterClass()
            
            
            var localErrorMapping: [LocalCode: (LocalCode, String)->()] = [:]
            
            var onUnhandledError: (LocalCode, String)->() = { print("FATAL: UNHANDLED API ERROR: \($0): \($1)") }
            
            enum LocalCode {
                case ERROR_IDENTITY_ID_NOT_REGISTERD
                case ERROR_PARAMETER_IDENTITY_ID_MISSING
                case ERROR_PARAMETER_IDENTITY_ID_MALFORMED
                case ERROR_RESPONSE__USER_ID_MISSING
                case ERROR_RESPONSE__USER_ID_MALFORMED
                case ERROR_RESPONSE__USERNAME_MISSING
                case ERROR_RESPONSE__USERNAME_MALFORMED
                case ERROR_RESPONSE__PROFILE_IMG_MISSING
                case ERROR_RESPONSE__PROFILE_IMG_MALFORMED
                case ERROR_RESPONSE__IDENTITY_ID_MISSING
                case ERROR_RESPONSE__IDENTITY_ID_MALFORMED
                case ERROR_RESPONSE__BADGE_NUM_MISSING
                case ERROR_RESPONSE__BADGE_NUM_MALFORMED
                case ERROR_RESPONSE__TOKEN_MISSING
                case ERROR_RESPONSE__TOKEN_MALFORMED
            }
            
            class Payload {
                var user_id: String!
                var username: String!
                var profile_img: String!
                var identity_id: String!
                var badge_num: String!
                var token: String!
            }
            
            static let localErrorMessageTable: [LocalCode: String] = {
                var res: [LocalCode: String] = [:]
                res[.ERROR_PARAMETER_IDENTITY_ID_MISSING] = 
                    "Parameter 'identity_id' does not exist."
                res[.ERROR_RESPONSE__BADGE_NUM_MISSING] = 
                    "Response 'badge_num' was not received"
                res[.ERROR_RESPONSE__PROFILE_IMG_MALFORMED] = 
                    "Response 'profile_img' is malformed. Should correspond to '^http\\S+$'"
                res[.ERROR_RESPONSE__BADGE_NUM_MALFORMED] = 
                    "Response 'badge_num' is malformed. Should correspond to '^[0-9]+$'"
                res[.ERROR_RESPONSE__IDENTITY_ID_MALFORMED] = 
                    "Response 'identity_id' is malformed. Should correspond to '^us-east-1:[a-f0-9]{8}(-[a-f0-9]{4}){3}-[a-f0-9]{12}$'"
                res[.ERROR_RESPONSE__USER_ID_MALFORMED] = 
                    "Response 'user_id' is malformed. Should correspond to '^[0-9]+$'"
                res[.ERROR_PARAMETER_IDENTITY_ID_MALFORMED] = 
                    "Parameter 'identity_id' is malformed. Should correspond to '^us-east-1:[a-f0-9]{8}(-[a-f0-9]{4}){3}-[a-f0-9]{12}$'"
                res[.ERROR_RESPONSE__USER_ID_MISSING] = 
                    "Response 'user_id' was not received"
                res[.ERROR_RESPONSE__USERNAME_MALFORMED] = 
                    "Response 'username' is malformed. Should correspond to '^\\w{4,20}$'"
                res[.ERROR_IDENTITY_ID_NOT_REGISTERD] = 
                    "The provided identity_id is not bound to any account"
                res[.ERROR_RESPONSE__USERNAME_MISSING] = 
                    "Response 'username' was not received"
                res[.ERROR_RESPONSE__TOKEN_MISSING] = 
                    "Response 'token' was not received"
                res[.ERROR_RESPONSE__TOKEN_MALFORMED] = 
                    "Response 'token' is malformed. Should correspond to '^[a-zA-Z0-9.-_]{400,2200}$'"
                res[.ERROR_RESPONSE__PROFILE_IMG_MISSING] = 
                    "Response 'profile_img' was not received"
                res[.ERROR_RESPONSE__IDENTITY_ID_MISSING] = 
                    "Response 'identity_id' was not received"
                return res
            }()
            
            
            static let localErrorReverseLookupTable: [String: LocalCode] = {
                var res: [String: LocalCode] = [:]
                res["ERROR_IDENTITY_ID_NOT_REGISTERD"] = .ERROR_IDENTITY_ID_NOT_REGISTERD
                res["ERROR_PARAMETER_IDENTITY_ID_MISSING"] = .ERROR_PARAMETER_IDENTITY_ID_MISSING
                res["ERROR_PARAMETER_IDENTITY_ID_MALFORMED"] = .ERROR_PARAMETER_IDENTITY_ID_MALFORMED
                res["ERROR_RESPONSE__USER_ID_MISSING"] = .ERROR_RESPONSE__USER_ID_MISSING
                res["ERROR_RESPONSE__USER_ID_MALFORMED"] = .ERROR_RESPONSE__USER_ID_MALFORMED
                res["ERROR_RESPONSE__USERNAME_MISSING"] = .ERROR_RESPONSE__USERNAME_MISSING
                res["ERROR_RESPONSE__USERNAME_MALFORMED"] = .ERROR_RESPONSE__USERNAME_MALFORMED
                res["ERROR_RESPONSE__PROFILE_IMG_MISSING"] = .ERROR_RESPONSE__PROFILE_IMG_MISSING
                res["ERROR_RESPONSE__PROFILE_IMG_MALFORMED"] = .ERROR_RESPONSE__PROFILE_IMG_MALFORMED
                res["ERROR_RESPONSE__IDENTITY_ID_MISSING"] = .ERROR_RESPONSE__IDENTITY_ID_MISSING
                res["ERROR_RESPONSE__IDENTITY_ID_MALFORMED"] = .ERROR_RESPONSE__IDENTITY_ID_MALFORMED
                res["ERROR_RESPONSE__BADGE_NUM_MISSING"] = .ERROR_RESPONSE__BADGE_NUM_MISSING
                res["ERROR_RESPONSE__BADGE_NUM_MALFORMED"] = .ERROR_RESPONSE__BADGE_NUM_MALFORMED
                res["ERROR_RESPONSE__TOKEN_MISSING"] = .ERROR_RESPONSE__TOKEN_MISSING
                res["ERROR_RESPONSE__TOKEN_MALFORMED"] = .ERROR_RESPONSE__TOKEN_MALFORMED
                return res
            }()
            
            
            
            func preHandleLocalError(code: String, _ mmsg: String? = nil) -> Bool {
                guard code == "SUCCESS" else {
                    guard let rcode = login.localErrorReverseLookupTable[code] else {
                        APISupport.handleCommunicationFailure(.ERROR_UNKNOWN_ERROR, emsg: mmsg)
                        return false
                    }
                    handleLocalError(rcode, mmsg)
                    return false
                }
                return true
            }
            
            func handleLocalError(code: LocalCode, _ mmsg: String? = nil) {
                let msg = mmsg ?? login.localErrorMessageTable[code] ?? "No error message defined"
                let handler = self.localErrorMapping[code] ?? self.onUnhandledError
                dispatch_async(dispatch_get_main_queue()) {
                    handler(code, msg)
                }
            }
            
            func validateSimpleResponse(json: [String: AnyObject], _ value: String, _ regex: String, _ misErr: LocalCode, _ malErr: LocalCode ) -> String? {
                if let value = (json as? [String: String])?[value] {
                    if !APISupport.matches(value, re: regex) {
                        handleLocalError(malErr)
                        return nil
                    }
                    else {
                        return value
                    }
                }
                else {
                    handleLocalError(misErr)
                    return nil
                }
            }
            
            func validateSimpleArrayResponse(json: [String: AnyObject], _ value: String, _ regex: String, _ misErr: LocalCode, _ malErr: LocalCode ) -> [String]? {
                if let values = (json as? [String: [String!]])?[value] {
                    var res: [String] = []
                    for value in values {
                        if !APISupport.matches(value, re: regex) {
                            handleLocalError(malErr)
                            return nil
                        }
                        else {
                            res.append(value)
                        }
                    }
                    return res
                }
                else {
                    handleLocalError(misErr)
                    return nil
                }
            }
            
            
            
            func perform(and: (payload: Payload)->()) {
                APISupport.performNetworkRequest(self) { (code, msg, rawJSON) in
                    if self.preHandleLocalError(code, msg) {
                        if let payload = self.validateResponse(rawJSON) {
                            dispatch_async(dispatch_get_main_queue()) {
                                and(payload: payload)
                            }
                        }
                    }
                }
            }
            func on(code: LocalCode, perform: (LocalCode, String)->()){
                self.localErrorMapping[code] = perform
            }
            
            
            func on_ERROR_IDENTITY_ID_NOT_REGISTERD(perform:(LocalCode, String)->()) {
                localErrorMapping[.ERROR_IDENTITY_ID_NOT_REGISTERD] = perform
            }
            
            
            func validateParameterPairs() -> [String: String]? {
            
                var res: [String: String] = [:]
            
                
                if let identity_id = parameters.identity_id {
                    if APISupport.matches(identity_id, re: "^us-east-1:[a-f0-9]{8}(-[a-f0-9]{4}){3}-[a-f0-9]{12}$") {
                        res["identity_id"] = identity_id
                    }
                    else {
                        handleLocalError(.ERROR_PARAMETER_IDENTITY_ID_MALFORMED)
                        return nil
                    }
                }
                else {
                    handleLocalError(.ERROR_PARAMETER_IDENTITY_ID_MISSING)
                    return nil
                }
            
                return res
            }
            
            
            func validateResponse(json: [String: AnyObject]) -> Payload? {
                let payload = Payload()
            
                payload.user_id = validateSimpleResponse(json, "user_id", "^[0-9]+$",
                     .ERROR_RESPONSE__USER_ID_MISSING, .ERROR_RESPONSE__USER_ID_MALFORMED)
                if payload.user_id == nil { return nil }
                
                payload.username = validateSimpleResponse(json, "username", "^\\w{4,20}$",
                     .ERROR_RESPONSE__USERNAME_MISSING, .ERROR_RESPONSE__USERNAME_MALFORMED)
                if payload.username == nil { return nil }
                
                payload.profile_img = validateSimpleResponse(json, "profile_img", "^http\\S+$",
                     .ERROR_RESPONSE__PROFILE_IMG_MISSING, .ERROR_RESPONSE__PROFILE_IMG_MALFORMED)
                if payload.profile_img == nil { return nil }
                
                payload.identity_id = validateSimpleResponse(json, "identity_id", "^us-east-1:[a-f0-9]{8}(-[a-f0-9]{4}){3}-[a-f0-9]{12}$",
                     .ERROR_RESPONSE__IDENTITY_ID_MISSING, .ERROR_RESPONSE__IDENTITY_ID_MALFORMED)
                if payload.identity_id == nil { return nil }
                
                payload.badge_num = validateSimpleResponse(json, "badge_num", "^[0-9]+$",
                     .ERROR_RESPONSE__BADGE_NUM_MISSING, .ERROR_RESPONSE__BADGE_NUM_MALFORMED)
                if payload.badge_num == nil { return nil }
                
                payload.token = validateSimpleResponse(json, "token", "^[a-zA-Z0-9.-_]{400,2200}$",
                     .ERROR_RESPONSE__TOKEN_MISSING, .ERROR_RESPONSE__TOKEN_MALFORMED)
                if payload.token == nil { return nil }
                
            
                return payload
            }
            
            
        }
        
        class sns_login: APIRequestProtocol {
            let apipath = "/auth/sns_login"
            
            class InternalParameterClass {
                var identity_id: String?
                var os: String?
                var ver: String?
                var model: String?
                var register_id: String?
                
            }
            
            let parameters = InternalParameterClass()
            
            
            var localErrorMapping: [LocalCode: (LocalCode, String)->()] = [:]
            
            var onUnhandledError: (LocalCode, String)->() = { print("FATAL: UNHANDLED API ERROR: \($0): \($1)") }
            
            enum LocalCode {
                case ERROR_IDENTITY_ID_NOT_REGISTERD
                case ERROR_REGISTER_ID_ALREADY_REGISTERD
                case ERROR_PARAMETER_IDENTITY_ID_MISSING
                case ERROR_PARAMETER_IDENTITY_ID_MALFORMED
                case ERROR_PARAMETER_OS_MISSING
                case ERROR_PARAMETER_OS_MALFORMED
                case ERROR_PARAMETER_VER_MISSING
                case ERROR_PARAMETER_VER_MALFORMED
                case ERROR_PARAMETER_MODEL_MISSING
                case ERROR_PARAMETER_MODEL_MALFORMED
                case ERROR_PARAMETER_REGISTER_ID_MISSING
                case ERROR_PARAMETER_REGISTER_ID_MALFORMED
                case ERROR_RESPONSE__USER_ID_MISSING
                case ERROR_RESPONSE__USER_ID_MALFORMED
                case ERROR_RESPONSE__USERNAME_MISSING
                case ERROR_RESPONSE__USERNAME_MALFORMED
                case ERROR_RESPONSE__PROFILE_IMG_MISSING
                case ERROR_RESPONSE__PROFILE_IMG_MALFORMED
                case ERROR_RESPONSE__IDENTITY_ID_MISSING
                case ERROR_RESPONSE__IDENTITY_ID_MALFORMED
                case ERROR_RESPONSE__BADGE_NUM_MISSING
                case ERROR_RESPONSE__BADGE_NUM_MALFORMED
                case ERROR_RESPONSE__TOKEN_MISSING
                case ERROR_RESPONSE__TOKEN_MALFORMED
            }
            
            class Payload {
                var user_id: String!
                var username: String!
                var profile_img: String!
                var identity_id: String!
                var badge_num: String!
                var token: String!
            }
            
            static let localErrorMessageTable: [LocalCode: String] = {
                var res: [LocalCode: String] = [:]
                res[.ERROR_PARAMETER_VER_MALFORMED] = 
                    "Parameter 'ver' is malformed. Should correspond to '^[0-9]+$'"
                res[.ERROR_RESPONSE__BADGE_NUM_MALFORMED] = 
                    "Response 'badge_num' is malformed. Should correspond to '^[0-9]+$'"
                res[.ERROR_RESPONSE__IDENTITY_ID_MALFORMED] = 
                    "Response 'identity_id' is malformed. Should correspond to '^us-east-1:[a-f0-9]{8}(-[a-f0-9]{4}){3}-[a-f0-9]{12}$'"
                res[.ERROR_PARAMETER_VER_MISSING] = 
                    "Parameter 'ver' does not exist."
                res[.ERROR_PARAMETER_IDENTITY_ID_MALFORMED] = 
                    "Parameter 'identity_id' is malformed. Should correspond to '^us-east-1:[a-f0-9]{8}(-[a-f0-9]{4}){3}-[a-f0-9]{12}$'"
                res[.ERROR_PARAMETER_OS_MALFORMED] = 
                    "Parameter 'os' is malformed. Should correspond to '^android$|^iOS$'"
                res[.ERROR_RESPONSE__USERNAME_MISSING] = 
                    "Response 'username' was not received"
                res[.ERROR_RESPONSE__BADGE_NUM_MISSING] = 
                    "Response 'badge_num' was not received"
                res[.ERROR_PARAMETER_MODEL_MISSING] = 
                    "Parameter 'model' does not exist."
                res[.ERROR_RESPONSE__IDENTITY_ID_MISSING] = 
                    "Response 'identity_id' was not received"
                res[.ERROR_PARAMETER_IDENTITY_ID_MISSING] = 
                    "Parameter 'identity_id' does not exist."
                res[.ERROR_REGISTER_ID_ALREADY_REGISTERD] = 
                    "This deviced already has an registerd other account"
                res[.ERROR_PARAMETER_REGISTER_ID_MALFORMED] = 
                    "Parameter 'register_id' is malformed. Should correspond to '^([a-f0-9]{64})|([a-zA-Z0-9:_-]{140,250})$'"
                res[.ERROR_PARAMETER_MODEL_MALFORMED] = 
                    "Parameter 'model' is malformed. Should correspond to '^[a-zA-Z0-9_-]{0,10}$'"
                res[.ERROR_RESPONSE__PROFILE_IMG_MALFORMED] = 
                    "Response 'profile_img' is malformed. Should correspond to '^http\\S+$'"
                res[.ERROR_RESPONSE__USERNAME_MALFORMED] = 
                    "Response 'username' is malformed. Should correspond to '^\\w{4,20}$'"
                res[.ERROR_RESPONSE__USER_ID_MALFORMED] = 
                    "Response 'user_id' is malformed. Should correspond to '^[0-9]+$'"
                res[.ERROR_PARAMETER_REGISTER_ID_MISSING] = 
                    "Parameter 'register_id' does not exist."
                res[.ERROR_RESPONSE__USER_ID_MISSING] = 
                    "Response 'user_id' was not received"
                res[.ERROR_IDENTITY_ID_NOT_REGISTERD] = 
                    "The provided identity_id is not bound to any account"
                res[.ERROR_RESPONSE__TOKEN_MISSING] = 
                    "Response 'token' was not received"
                res[.ERROR_RESPONSE__TOKEN_MALFORMED] = 
                    "Response 'token' is malformed. Should correspond to '^[a-zA-Z0-9.-_]{400,2200}$'"
                res[.ERROR_RESPONSE__PROFILE_IMG_MISSING] = 
                    "Response 'profile_img' was not received"
                res[.ERROR_PARAMETER_OS_MISSING] = 
                    "Parameter 'os' does not exist."
                return res
            }()
            
            
            static let localErrorReverseLookupTable: [String: LocalCode] = {
                var res: [String: LocalCode] = [:]
                res["ERROR_IDENTITY_ID_NOT_REGISTERD"] = .ERROR_IDENTITY_ID_NOT_REGISTERD
                res["ERROR_REGISTER_ID_ALREADY_REGISTERD"] = .ERROR_REGISTER_ID_ALREADY_REGISTERD
                res["ERROR_PARAMETER_IDENTITY_ID_MISSING"] = .ERROR_PARAMETER_IDENTITY_ID_MISSING
                res["ERROR_PARAMETER_IDENTITY_ID_MALFORMED"] = .ERROR_PARAMETER_IDENTITY_ID_MALFORMED
                res["ERROR_PARAMETER_OS_MISSING"] = .ERROR_PARAMETER_OS_MISSING
                res["ERROR_PARAMETER_OS_MALFORMED"] = .ERROR_PARAMETER_OS_MALFORMED
                res["ERROR_PARAMETER_VER_MISSING"] = .ERROR_PARAMETER_VER_MISSING
                res["ERROR_PARAMETER_VER_MALFORMED"] = .ERROR_PARAMETER_VER_MALFORMED
                res["ERROR_PARAMETER_MODEL_MISSING"] = .ERROR_PARAMETER_MODEL_MISSING
                res["ERROR_PARAMETER_MODEL_MALFORMED"] = .ERROR_PARAMETER_MODEL_MALFORMED
                res["ERROR_PARAMETER_REGISTER_ID_MISSING"] = .ERROR_PARAMETER_REGISTER_ID_MISSING
                res["ERROR_PARAMETER_REGISTER_ID_MALFORMED"] = .ERROR_PARAMETER_REGISTER_ID_MALFORMED
                res["ERROR_RESPONSE__USER_ID_MISSING"] = .ERROR_RESPONSE__USER_ID_MISSING
                res["ERROR_RESPONSE__USER_ID_MALFORMED"] = .ERROR_RESPONSE__USER_ID_MALFORMED
                res["ERROR_RESPONSE__USERNAME_MISSING"] = .ERROR_RESPONSE__USERNAME_MISSING
                res["ERROR_RESPONSE__USERNAME_MALFORMED"] = .ERROR_RESPONSE__USERNAME_MALFORMED
                res["ERROR_RESPONSE__PROFILE_IMG_MISSING"] = .ERROR_RESPONSE__PROFILE_IMG_MISSING
                res["ERROR_RESPONSE__PROFILE_IMG_MALFORMED"] = .ERROR_RESPONSE__PROFILE_IMG_MALFORMED
                res["ERROR_RESPONSE__IDENTITY_ID_MISSING"] = .ERROR_RESPONSE__IDENTITY_ID_MISSING
                res["ERROR_RESPONSE__IDENTITY_ID_MALFORMED"] = .ERROR_RESPONSE__IDENTITY_ID_MALFORMED
                res["ERROR_RESPONSE__BADGE_NUM_MISSING"] = .ERROR_RESPONSE__BADGE_NUM_MISSING
                res["ERROR_RESPONSE__BADGE_NUM_MALFORMED"] = .ERROR_RESPONSE__BADGE_NUM_MALFORMED
                res["ERROR_RESPONSE__TOKEN_MISSING"] = .ERROR_RESPONSE__TOKEN_MISSING
                res["ERROR_RESPONSE__TOKEN_MALFORMED"] = .ERROR_RESPONSE__TOKEN_MALFORMED
                return res
            }()
            
            
            
            func preHandleLocalError(code: String, _ mmsg: String? = nil) -> Bool {
                guard code == "SUCCESS" else {
                    guard let rcode = sns_login.localErrorReverseLookupTable[code] else {
                        APISupport.handleCommunicationFailure(.ERROR_UNKNOWN_ERROR, emsg: mmsg)
                        return false
                    }
                    handleLocalError(rcode, mmsg)
                    return false
                }
                return true
            }
            
            func handleLocalError(code: LocalCode, _ mmsg: String? = nil) {
                let msg = mmsg ?? sns_login.localErrorMessageTable[code] ?? "No error message defined"
                let handler = self.localErrorMapping[code] ?? self.onUnhandledError
                dispatch_async(dispatch_get_main_queue()) {
                    handler(code, msg)
                }
            }
            
            func validateSimpleResponse(json: [String: AnyObject], _ value: String, _ regex: String, _ misErr: LocalCode, _ malErr: LocalCode ) -> String? {
                if let value = (json as? [String: String])?[value] {
                    if !APISupport.matches(value, re: regex) {
                        handleLocalError(malErr)
                        return nil
                    }
                    else {
                        return value
                    }
                }
                else {
                    handleLocalError(misErr)
                    return nil
                }
            }
            
            func validateSimpleArrayResponse(json: [String: AnyObject], _ value: String, _ regex: String, _ misErr: LocalCode, _ malErr: LocalCode ) -> [String]? {
                if let values = (json as? [String: [String!]])?[value] {
                    var res: [String] = []
                    for value in values {
                        if !APISupport.matches(value, re: regex) {
                            handleLocalError(malErr)
                            return nil
                        }
                        else {
                            res.append(value)
                        }
                    }
                    return res
                }
                else {
                    handleLocalError(misErr)
                    return nil
                }
            }
            
            
            
            func perform(and: (payload: Payload)->()) {
                APISupport.performNetworkRequest(self) { (code, msg, rawJSON) in
                    if self.preHandleLocalError(code, msg) {
                        if let payload = self.validateResponse(rawJSON) {
                            dispatch_async(dispatch_get_main_queue()) {
                                and(payload: payload)
                            }
                        }
                    }
                }
            }
            func on(code: LocalCode, perform: (LocalCode, String)->()){
                self.localErrorMapping[code] = perform
            }
            
            
            func on_ERROR_IDENTITY_ID_NOT_REGISTERD(perform:(LocalCode, String)->()) {
                localErrorMapping[.ERROR_IDENTITY_ID_NOT_REGISTERD] = perform
            }
            func on_ERROR_REGISTER_ID_ALREADY_REGISTERD(perform:(LocalCode, String)->()) {
                localErrorMapping[.ERROR_REGISTER_ID_ALREADY_REGISTERD] = perform
            }
            
            
            func validateParameterPairs() -> [String: String]? {
            
                var res: [String: String] = [:]
            
                
                if let identity_id = parameters.identity_id {
                    if APISupport.matches(identity_id, re: "^us-east-1:[a-f0-9]{8}(-[a-f0-9]{4}){3}-[a-f0-9]{12}$") {
                        res["identity_id"] = identity_id
                    }
                    else {
                        handleLocalError(.ERROR_PARAMETER_IDENTITY_ID_MALFORMED)
                        return nil
                    }
                }
                else {
                    handleLocalError(.ERROR_PARAMETER_IDENTITY_ID_MISSING)
                    return nil
                }
                
                if let os = parameters.os {
                    if APISupport.matches(os, re: "^android$|^iOS$") {
                        res["os"] = os
                    }
                    else {
                        handleLocalError(.ERROR_PARAMETER_OS_MALFORMED)
                        return nil
                    }
                }
                else {
                    handleLocalError(.ERROR_PARAMETER_OS_MISSING)
                    return nil
                }
                
                if let ver = parameters.ver {
                    if APISupport.matches(ver, re: "^[0-9]+$") {
                        res["ver"] = ver
                    }
                    else {
                        handleLocalError(.ERROR_PARAMETER_VER_MALFORMED)
                        return nil
                    }
                }
                else {
                    handleLocalError(.ERROR_PARAMETER_VER_MISSING)
                    return nil
                }
                
                if let model = parameters.model {
                    if APISupport.matches(model, re: "^[a-zA-Z0-9_-]{0,10}$") {
                        res["model"] = model
                    }
                    else {
                        handleLocalError(.ERROR_PARAMETER_MODEL_MALFORMED)
                        return nil
                    }
                }
                else {
                    handleLocalError(.ERROR_PARAMETER_MODEL_MISSING)
                    return nil
                }
                
                if let register_id = parameters.register_id {
                    if APISupport.matches(register_id, re: "^([a-f0-9]{64})|([a-zA-Z0-9:_-]{140,250})$") {
                        res["register_id"] = register_id
                    }
                    else {
                        handleLocalError(.ERROR_PARAMETER_REGISTER_ID_MALFORMED)
                        return nil
                    }
                }
                else {
                    handleLocalError(.ERROR_PARAMETER_REGISTER_ID_MISSING)
                    return nil
                }
            
                return res
            }
            
            
            func validateResponse(json: [String: AnyObject]) -> Payload? {
                let payload = Payload()
            
                payload.user_id = validateSimpleResponse(json, "user_id", "^[0-9]+$",
                     .ERROR_RESPONSE__USER_ID_MISSING, .ERROR_RESPONSE__USER_ID_MALFORMED)
                if payload.user_id == nil { return nil }
                
                payload.username = validateSimpleResponse(json, "username", "^\\w{4,20}$",
                     .ERROR_RESPONSE__USERNAME_MISSING, .ERROR_RESPONSE__USERNAME_MALFORMED)
                if payload.username == nil { return nil }
                
                payload.profile_img = validateSimpleResponse(json, "profile_img", "^http\\S+$",
                     .ERROR_RESPONSE__PROFILE_IMG_MISSING, .ERROR_RESPONSE__PROFILE_IMG_MALFORMED)
                if payload.profile_img == nil { return nil }
                
                payload.identity_id = validateSimpleResponse(json, "identity_id", "^us-east-1:[a-f0-9]{8}(-[a-f0-9]{4}){3}-[a-f0-9]{12}$",
                     .ERROR_RESPONSE__IDENTITY_ID_MISSING, .ERROR_RESPONSE__IDENTITY_ID_MALFORMED)
                if payload.identity_id == nil { return nil }
                
                payload.badge_num = validateSimpleResponse(json, "badge_num", "^[0-9]+$",
                     .ERROR_RESPONSE__BADGE_NUM_MISSING, .ERROR_RESPONSE__BADGE_NUM_MALFORMED)
                if payload.badge_num == nil { return nil }
                
                payload.token = validateSimpleResponse(json, "token", "^[a-zA-Z0-9.-_]{400,2200}$",
                     .ERROR_RESPONSE__TOKEN_MISSING, .ERROR_RESPONSE__TOKEN_MALFORMED)
                if payload.token == nil { return nil }
                
            
                return payload
            }
            
            
        }
        
        class signup: APIRequestProtocol {
            let apipath = "/auth/signup"
            
            class InternalParameterClass {
                var username: String?
                var os: String?
                var ver: String?
                var model: String?
                var register_id: String?
                
            }
            
            let parameters = InternalParameterClass()
            
            
            var localErrorMapping: [LocalCode: (LocalCode, String)->()] = [:]
            
            var onUnhandledError: (LocalCode, String)->() = { print("FATAL: UNHANDLED API ERROR: \($0): \($1)") }
            
            enum LocalCode {
                case ERROR_USERNAME_ALREADY_REGISTERD
                case ERROR_REGISTER_ID_ALREADY_REGISTERD
                case ERROR_PARAMETER_USERNAME_MISSING
                case ERROR_PARAMETER_USERNAME_MALFORMED
                case ERROR_PARAMETER_OS_MISSING
                case ERROR_PARAMETER_OS_MALFORMED
                case ERROR_PARAMETER_VER_MISSING
                case ERROR_PARAMETER_VER_MALFORMED
                case ERROR_PARAMETER_MODEL_MISSING
                case ERROR_PARAMETER_MODEL_MALFORMED
                case ERROR_PARAMETER_REGISTER_ID_MISSING
                case ERROR_PARAMETER_REGISTER_ID_MALFORMED
                case ERROR_RESPONSE__USER_ID_MISSING
                case ERROR_RESPONSE__USER_ID_MALFORMED
                case ERROR_RESPONSE__USERNAME_MISSING
                case ERROR_RESPONSE__USERNAME_MALFORMED
                case ERROR_RESPONSE__PROFILE_IMG_MISSING
                case ERROR_RESPONSE__PROFILE_IMG_MALFORMED
                case ERROR_RESPONSE__IDENTITY_ID_MISSING
                case ERROR_RESPONSE__IDENTITY_ID_MALFORMED
                case ERROR_RESPONSE__BADGE_NUM_MISSING
                case ERROR_RESPONSE__BADGE_NUM_MALFORMED
                case ERROR_RESPONSE__TOKEN_MISSING
                case ERROR_RESPONSE__TOKEN_MALFORMED
            }
            
            class Payload {
                var user_id: String!
                var username: String!
                var profile_img: String!
                var identity_id: String!
                var badge_num: String!
                var token: String!
            }
            
            static let localErrorMessageTable: [LocalCode: String] = {
                var res: [LocalCode: String] = [:]
                res[.ERROR_PARAMETER_VER_MALFORMED] = 
                    "Parameter 'ver' is malformed. Should correspond to '^[0-9]+$'"
                res[.ERROR_USERNAME_ALREADY_REGISTERD] = 
                    "The provided username was already registerd by another user"
                res[.ERROR_RESPONSE__BADGE_NUM_MALFORMED] = 
                    "Response 'badge_num' is malformed. Should correspond to '^[0-9]+$'"
                res[.ERROR_RESPONSE__IDENTITY_ID_MALFORMED] = 
                    "Response 'identity_id' is malformed. Should correspond to '^us-east-1:[a-f0-9]{8}(-[a-f0-9]{4}){3}-[a-f0-9]{12}$'"
                res[.ERROR_PARAMETER_VER_MISSING] = 
                    "Parameter 'ver' does not exist."
                res[.ERROR_PARAMETER_USERNAME_MALFORMED] = 
                    "Parameter 'username' is malformed. Should correspond to '^\\w{4,20}$'"
                res[.ERROR_RESPONSE__USER_ID_MALFORMED] = 
                    "Response 'user_id' is malformed. Should correspond to '^[0-9]+$'"
                res[.ERROR_PARAMETER_OS_MALFORMED] = 
                    "Parameter 'os' is malformed. Should correspond to '^android$|^iOS$'"
                res[.ERROR_RESPONSE__USERNAME_MISSING] = 
                    "Response 'username' was not received"
                res[.ERROR_RESPONSE__BADGE_NUM_MISSING] = 
                    "Response 'badge_num' was not received"
                res[.ERROR_PARAMETER_MODEL_MISSING] = 
                    "Parameter 'model' does not exist."
                res[.ERROR_RESPONSE__IDENTITY_ID_MISSING] = 
                    "Response 'identity_id' was not received"
                res[.ERROR_PARAMETER_USERNAME_MISSING] = 
                    "Parameter 'username' does not exist."
                res[.ERROR_REGISTER_ID_ALREADY_REGISTERD] = 
                    "This deviced already has an registerd account"
                res[.ERROR_PARAMETER_REGISTER_ID_MALFORMED] = 
                    "Parameter 'register_id' is malformed. Should correspond to '^([a-f0-9]{64})|([a-zA-Z0-9:_-]{140,250})$'"
                res[.ERROR_PARAMETER_MODEL_MALFORMED] = 
                    "Parameter 'model' is malformed. Should correspond to '^[a-zA-Z0-9_-]{0,10}$'"
                res[.ERROR_RESPONSE__PROFILE_IMG_MALFORMED] = 
                    "Response 'profile_img' is malformed. Should correspond to '^http\\S+$'"
                res[.ERROR_RESPONSE__USERNAME_MALFORMED] = 
                    "Response 'username' is malformed. Should correspond to '^\\w{4,20}$'"
                res[.ERROR_PARAMETER_REGISTER_ID_MISSING] = 
                    "Parameter 'register_id' does not exist."
                res[.ERROR_RESPONSE__USER_ID_MISSING] = 
                    "Response 'user_id' was not received"
                res[.ERROR_RESPONSE__TOKEN_MALFORMED] = 
                    "Response 'token' is malformed. Should correspond to '^[a-zA-Z0-9.-_]{400,2200}$'"
                res[.ERROR_RESPONSE__TOKEN_MISSING] = 
                    "Response 'token' was not received"
                res[.ERROR_RESPONSE__PROFILE_IMG_MISSING] = 
                    "Response 'profile_img' was not received"
                res[.ERROR_PARAMETER_OS_MISSING] = 
                    "Parameter 'os' does not exist."
                return res
            }()
            
            
            static let localErrorReverseLookupTable: [String: LocalCode] = {
                var res: [String: LocalCode] = [:]
                res["ERROR_USERNAME_ALREADY_REGISTERD"] = .ERROR_USERNAME_ALREADY_REGISTERD
                res["ERROR_REGISTER_ID_ALREADY_REGISTERD"] = .ERROR_REGISTER_ID_ALREADY_REGISTERD
                res["ERROR_PARAMETER_USERNAME_MISSING"] = .ERROR_PARAMETER_USERNAME_MISSING
                res["ERROR_PARAMETER_USERNAME_MALFORMED"] = .ERROR_PARAMETER_USERNAME_MALFORMED
                res["ERROR_PARAMETER_OS_MISSING"] = .ERROR_PARAMETER_OS_MISSING
                res["ERROR_PARAMETER_OS_MALFORMED"] = .ERROR_PARAMETER_OS_MALFORMED
                res["ERROR_PARAMETER_VER_MISSING"] = .ERROR_PARAMETER_VER_MISSING
                res["ERROR_PARAMETER_VER_MALFORMED"] = .ERROR_PARAMETER_VER_MALFORMED
                res["ERROR_PARAMETER_MODEL_MISSING"] = .ERROR_PARAMETER_MODEL_MISSING
                res["ERROR_PARAMETER_MODEL_MALFORMED"] = .ERROR_PARAMETER_MODEL_MALFORMED
                res["ERROR_PARAMETER_REGISTER_ID_MISSING"] = .ERROR_PARAMETER_REGISTER_ID_MISSING
                res["ERROR_PARAMETER_REGISTER_ID_MALFORMED"] = .ERROR_PARAMETER_REGISTER_ID_MALFORMED
                res["ERROR_RESPONSE__USER_ID_MISSING"] = .ERROR_RESPONSE__USER_ID_MISSING
                res["ERROR_RESPONSE__USER_ID_MALFORMED"] = .ERROR_RESPONSE__USER_ID_MALFORMED
                res["ERROR_RESPONSE__USERNAME_MISSING"] = .ERROR_RESPONSE__USERNAME_MISSING
                res["ERROR_RESPONSE__USERNAME_MALFORMED"] = .ERROR_RESPONSE__USERNAME_MALFORMED
                res["ERROR_RESPONSE__PROFILE_IMG_MISSING"] = .ERROR_RESPONSE__PROFILE_IMG_MISSING
                res["ERROR_RESPONSE__PROFILE_IMG_MALFORMED"] = .ERROR_RESPONSE__PROFILE_IMG_MALFORMED
                res["ERROR_RESPONSE__IDENTITY_ID_MISSING"] = .ERROR_RESPONSE__IDENTITY_ID_MISSING
                res["ERROR_RESPONSE__IDENTITY_ID_MALFORMED"] = .ERROR_RESPONSE__IDENTITY_ID_MALFORMED
                res["ERROR_RESPONSE__BADGE_NUM_MISSING"] = .ERROR_RESPONSE__BADGE_NUM_MISSING
                res["ERROR_RESPONSE__BADGE_NUM_MALFORMED"] = .ERROR_RESPONSE__BADGE_NUM_MALFORMED
                res["ERROR_RESPONSE__TOKEN_MISSING"] = .ERROR_RESPONSE__TOKEN_MISSING
                res["ERROR_RESPONSE__TOKEN_MALFORMED"] = .ERROR_RESPONSE__TOKEN_MALFORMED
                return res
            }()
            
            
            
            func preHandleLocalError(code: String, _ mmsg: String? = nil) -> Bool {
                guard code == "SUCCESS" else {
                    guard let rcode = signup.localErrorReverseLookupTable[code] else {
                        APISupport.handleCommunicationFailure(.ERROR_UNKNOWN_ERROR, emsg: mmsg)
                        return false
                    }
                    handleLocalError(rcode, mmsg)
                    return false
                }
                return true
            }
            
            func handleLocalError(code: LocalCode, _ mmsg: String? = nil) {
                let msg = mmsg ?? signup.localErrorMessageTable[code] ?? "No error message defined"
                let handler = self.localErrorMapping[code] ?? self.onUnhandledError
                dispatch_async(dispatch_get_main_queue()) {
                    handler(code, msg)
                }
            }
            
            func validateSimpleResponse(json: [String: AnyObject], _ value: String, _ regex: String, _ misErr: LocalCode, _ malErr: LocalCode ) -> String? {
                if let value = (json as? [String: String])?[value] {
                    if !APISupport.matches(value, re: regex) {
                        handleLocalError(malErr)
                        return nil
                    }
                    else {
                        return value
                    }
                }
                else {
                    handleLocalError(misErr)
                    return nil
                }
            }
            
            func validateSimpleArrayResponse(json: [String: AnyObject], _ value: String, _ regex: String, _ misErr: LocalCode, _ malErr: LocalCode ) -> [String]? {
                if let values = (json as? [String: [String!]])?[value] {
                    var res: [String] = []
                    for value in values {
                        if !APISupport.matches(value, re: regex) {
                            handleLocalError(malErr)
                            return nil
                        }
                        else {
                            res.append(value)
                        }
                    }
                    return res
                }
                else {
                    handleLocalError(misErr)
                    return nil
                }
            }
            
            
            
            func perform(and: (payload: Payload)->()) {
                APISupport.performNetworkRequest(self) { (code, msg, rawJSON) in
                    if self.preHandleLocalError(code, msg) {
                        if let payload = self.validateResponse(rawJSON) {
                            dispatch_async(dispatch_get_main_queue()) {
                                and(payload: payload)
                            }
                        }
                    }
                }
            }
            func on(code: LocalCode, perform: (LocalCode, String)->()){
                self.localErrorMapping[code] = perform
            }
            
            
            func on_ERROR_USERNAME_ALREADY_REGISTERD(perform:(LocalCode, String)->()) {
                localErrorMapping[.ERROR_USERNAME_ALREADY_REGISTERD] = perform
            }
            func on_ERROR_REGISTER_ID_ALREADY_REGISTERD(perform:(LocalCode, String)->()) {
                localErrorMapping[.ERROR_REGISTER_ID_ALREADY_REGISTERD] = perform
            }
            
            
            func validateParameterPairs() -> [String: String]? {
            
                var res: [String: String] = [:]
            
                
                if let username = parameters.username {
                    if APISupport.matches(username, re: "^\\w{4,20}$") {
                        res["username"] = username
                    }
                    else {
                        handleLocalError(.ERROR_PARAMETER_USERNAME_MALFORMED)
                        return nil
                    }
                }
                else {
                    handleLocalError(.ERROR_PARAMETER_USERNAME_MISSING)
                    return nil
                }
                
                if let os = parameters.os {
                    if APISupport.matches(os, re: "^android$|^iOS$") {
                        res["os"] = os
                    }
                    else {
                        handleLocalError(.ERROR_PARAMETER_OS_MALFORMED)
                        return nil
                    }
                }
                else {
                    handleLocalError(.ERROR_PARAMETER_OS_MISSING)
                    return nil
                }
                
                if let ver = parameters.ver {
                    if APISupport.matches(ver, re: "^[0-9]+$") {
                        res["ver"] = ver
                    }
                    else {
                        handleLocalError(.ERROR_PARAMETER_VER_MALFORMED)
                        return nil
                    }
                }
                else {
                    handleLocalError(.ERROR_PARAMETER_VER_MISSING)
                    return nil
                }
                
                if let model = parameters.model {
                    if APISupport.matches(model, re: "^[a-zA-Z0-9_-]{0,10}$") {
                        res["model"] = model
                    }
                    else {
                        handleLocalError(.ERROR_PARAMETER_MODEL_MALFORMED)
                        return nil
                    }
                }
                else {
                    handleLocalError(.ERROR_PARAMETER_MODEL_MISSING)
                    return nil
                }
                
                if let register_id = parameters.register_id {
                    if APISupport.matches(register_id, re: "^([a-f0-9]{64})|([a-zA-Z0-9:_-]{140,250})$") {
                        res["register_id"] = register_id
                    }
                    else {
                        handleLocalError(.ERROR_PARAMETER_REGISTER_ID_MALFORMED)
                        return nil
                    }
                }
                else {
                    handleLocalError(.ERROR_PARAMETER_REGISTER_ID_MISSING)
                    return nil
                }
            
                return res
            }
            
            
            func validateResponse(json: [String: AnyObject]) -> Payload? {
                let payload = Payload()
            
                payload.user_id = validateSimpleResponse(json, "user_id", "^[0-9]+$",
                     .ERROR_RESPONSE__USER_ID_MISSING, .ERROR_RESPONSE__USER_ID_MALFORMED)
                if payload.user_id == nil { return nil }
                
                payload.username = validateSimpleResponse(json, "username", "^\\w{4,20}$",
                     .ERROR_RESPONSE__USERNAME_MISSING, .ERROR_RESPONSE__USERNAME_MALFORMED)
                if payload.username == nil { return nil }
                
                payload.profile_img = validateSimpleResponse(json, "profile_img", "^http\\S+$",
                     .ERROR_RESPONSE__PROFILE_IMG_MISSING, .ERROR_RESPONSE__PROFILE_IMG_MALFORMED)
                if payload.profile_img == nil { return nil }
                
                payload.identity_id = validateSimpleResponse(json, "identity_id", "^us-east-1:[a-f0-9]{8}(-[a-f0-9]{4}){3}-[a-f0-9]{12}$",
                     .ERROR_RESPONSE__IDENTITY_ID_MISSING, .ERROR_RESPONSE__IDENTITY_ID_MALFORMED)
                if payload.identity_id == nil { return nil }
                
                payload.badge_num = validateSimpleResponse(json, "badge_num", "^[0-9]+$",
                     .ERROR_RESPONSE__BADGE_NUM_MISSING, .ERROR_RESPONSE__BADGE_NUM_MALFORMED)
                if payload.badge_num == nil { return nil }
                
                payload.token = validateSimpleResponse(json, "token", "^[a-zA-Z0-9.-_]{400,2200}$",
                     .ERROR_RESPONSE__TOKEN_MISSING, .ERROR_RESPONSE__TOKEN_MALFORMED)
                if payload.token == nil { return nil }
                
            
                return payload
            }
            
            
        }
        
     }
    
    class post {
    
        class sns: APIRequestProtocol {
            let apipath = "/post/sns"
            
            class InternalParameterClass {
                var provider: String?
                var token: String?
                var profile_img: String?
                
            }
            
            let parameters = InternalParameterClass()
            
            
            var localErrorMapping: [LocalCode: (LocalCode, String)->()] = [:]
            
            var onUnhandledError: (LocalCode, String)->() = { print("FATAL: UNHANDLED API ERROR: \($0): \($1)") }
            
            enum LocalCode {
                case ERROR_SNS_PROVIDER_TOKEN_NOT_VALID
                case ERROR_PROFILE_IMAGE_DOES_NOT_EXIST
                case ERROR_PROVIDER_UNREACHABLE
                case ERROR_PARAMETER_PROVIDER_MISSING
                case ERROR_PARAMETER_PROVIDER_MALFORMED
                case ERROR_PARAMETER_TOKEN_MISSING
                case ERROR_PARAMETER_TOKEN_MALFORMED
                case ERROR_PARAMETER_PROFILE_IMG_MISSING
                case ERROR_PARAMETER_PROFILE_IMG_MALFORMED
            }
            
            
            static let localErrorMessageTable: [LocalCode: String] = {
                var res: [LocalCode: String] = [:]
                res[.ERROR_PARAMETER_TOKEN_MALFORMED] = 
                    "Parameter 'token' is malformed. Should correspond to '^\\S{20,4000}$'"
                res[.ERROR_PARAMETER_PROFILE_IMG_MALFORMED] = 
                    "Parameter 'profile_img' is malformed. Should correspond to '^http\\S+$'"
                res[.ERROR_SNS_PROVIDER_TOKEN_NOT_VALID] = 
                    "The provided sns token is invalid or has expired"
                res[.ERROR_PARAMETER_PROVIDER_MISSING] = 
                    "Parameter 'provider' does not exist."
                res[.ERROR_PARAMETER_PROVIDER_MALFORMED] = 
                    "Parameter 'provider' is malformed. Should correspond to '^(api.twitter.com)|(graph.facebook.com)$'"
                res[.ERROR_PROVIDER_UNREACHABLE] = 
                    "The providers server infrastructure appears to be down"
                res[.ERROR_PROFILE_IMAGE_DOES_NOT_EXIST] = 
                    "The provided link to the profile image cound not be downloaded"
                res[.ERROR_PARAMETER_PROFILE_IMG_MISSING] = 
                    "Parameter 'profile_img' does not exist."
                res[.ERROR_PARAMETER_TOKEN_MISSING] = 
                    "Parameter 'token' does not exist."
                return res
            }()
            
            
            static let localErrorReverseLookupTable: [String: LocalCode] = {
                var res: [String: LocalCode] = [:]
                res["ERROR_SNS_PROVIDER_TOKEN_NOT_VALID"] = .ERROR_SNS_PROVIDER_TOKEN_NOT_VALID
                res["ERROR_PROFILE_IMAGE_DOES_NOT_EXIST"] = .ERROR_PROFILE_IMAGE_DOES_NOT_EXIST
                res["ERROR_PROVIDER_UNREACHABLE"] = .ERROR_PROVIDER_UNREACHABLE
                res["ERROR_PARAMETER_PROVIDER_MISSING"] = .ERROR_PARAMETER_PROVIDER_MISSING
                res["ERROR_PARAMETER_PROVIDER_MALFORMED"] = .ERROR_PARAMETER_PROVIDER_MALFORMED
                res["ERROR_PARAMETER_TOKEN_MISSING"] = .ERROR_PARAMETER_TOKEN_MISSING
                res["ERROR_PARAMETER_TOKEN_MALFORMED"] = .ERROR_PARAMETER_TOKEN_MALFORMED
                res["ERROR_PARAMETER_PROFILE_IMG_MISSING"] = .ERROR_PARAMETER_PROFILE_IMG_MISSING
                res["ERROR_PARAMETER_PROFILE_IMG_MALFORMED"] = .ERROR_PARAMETER_PROFILE_IMG_MALFORMED
                return res
            }()
            
            
            
            func preHandleLocalError(code: String, _ mmsg: String? = nil) -> Bool {
                guard code == "SUCCESS" else {
                    guard let rcode = sns.localErrorReverseLookupTable[code] else {
                        APISupport.handleCommunicationFailure(.ERROR_UNKNOWN_ERROR, emsg: mmsg)
                        return false
                    }
                    handleLocalError(rcode, mmsg)
                    return false
                }
                return true
            }
            
            func handleLocalError(code: LocalCode, _ mmsg: String? = nil) {
                let msg = mmsg ?? sns.localErrorMessageTable[code] ?? "No error message defined"
                let handler = self.localErrorMapping[code] ?? self.onUnhandledError
                dispatch_async(dispatch_get_main_queue()) {
                    handler(code, msg)
                }
            }
            
            func validateSimpleResponse(json: [String: AnyObject], _ value: String, _ regex: String, _ misErr: LocalCode, _ malErr: LocalCode ) -> String? {
                if let value = (json as? [String: String])?[value] {
                    if !APISupport.matches(value, re: regex) {
                        handleLocalError(malErr)
                        return nil
                    }
                    else {
                        return value
                    }
                }
                else {
                    handleLocalError(misErr)
                    return nil
                }
            }
            
            func validateSimpleArrayResponse(json: [String: AnyObject], _ value: String, _ regex: String, _ misErr: LocalCode, _ malErr: LocalCode ) -> [String]? {
                if let values = (json as? [String: [String!]])?[value] {
                    var res: [String] = []
                    for value in values {
                        if !APISupport.matches(value, re: regex) {
                            handleLocalError(malErr)
                            return nil
                        }
                        else {
                            res.append(value)
                        }
                    }
                    return res
                }
                else {
                    handleLocalError(misErr)
                    return nil
                }
            }
            
            
            
            func perform(and: ()->()) {
                APISupport.performNetworkRequest(self) { (code, msg, _) in
                    if self.preHandleLocalError(code, msg) {
                        and()
                    }
                }
            }
            func on(code: LocalCode, perform: (LocalCode, String)->()){
                self.localErrorMapping[code] = perform
            }
            
            
            func on_ERROR_SNS_PROVIDER_TOKEN_NOT_VALID(perform:(LocalCode, String)->()) {
                localErrorMapping[.ERROR_SNS_PROVIDER_TOKEN_NOT_VALID] = perform
            }
            func on_ERROR_PROFILE_IMAGE_DOES_NOT_EXIST(perform:(LocalCode, String)->()) {
                localErrorMapping[.ERROR_PROFILE_IMAGE_DOES_NOT_EXIST] = perform
            }
            func on_ERROR_PROVIDER_UNREACHABLE(perform:(LocalCode, String)->()) {
                localErrorMapping[.ERROR_PROVIDER_UNREACHABLE] = perform
            }
            
            
            func validateParameterPairs() -> [String: String]? {
            
                var res: [String: String] = [:]
            
                
                if let provider = parameters.provider {
                    if APISupport.matches(provider, re: "^(api.twitter.com)|(graph.facebook.com)$") {
                        res["provider"] = provider
                    }
                    else {
                        handleLocalError(.ERROR_PARAMETER_PROVIDER_MALFORMED)
                        return nil
                    }
                }
                else {
                    handleLocalError(.ERROR_PARAMETER_PROVIDER_MISSING)
                    return nil
                }
                
                if let token = parameters.token {
                    if APISupport.matches(token, re: "^\\S{20,4000}$") {
                        res["token"] = token
                    }
                    else {
                        handleLocalError(.ERROR_PARAMETER_TOKEN_MALFORMED)
                        return nil
                    }
                }
                else {
                    handleLocalError(.ERROR_PARAMETER_TOKEN_MISSING)
                    return nil
                }
                
                if let profile_img = parameters.profile_img {
                    if APISupport.matches(profile_img, re: "^http\\S+$") {
                        res["profile_img"] = profile_img
                    }
                    else {
                        handleLocalError(.ERROR_PARAMETER_PROFILE_IMG_MALFORMED)
                        return nil
                    }
                }
                else {
                    handleLocalError(.ERROR_PARAMETER_PROFILE_IMG_MISSING)
                    return nil
                }
            
                return res
            }
            
            
            
            
        }
        
        class password: APIRequestProtocol {
            let apipath = "/post/password"
            
            class InternalParameterClass {
                var pass: String?
                
            }
            
            let parameters = InternalParameterClass()
            
            
            var localErrorMapping: [LocalCode: (LocalCode, String)->()] = [:]
            
            var onUnhandledError: (LocalCode, String)->() = { print("FATAL: UNHANDLED API ERROR: \($0): \($1)") }
            
            enum LocalCode {
                case ERROR_PARAMETER_PASS_MISSING
                case ERROR_PARAMETER_PASS_MALFORMED
            }
            
            
            static let localErrorMessageTable: [LocalCode: String] = {
                var res: [LocalCode: String] = [:]
                res[.ERROR_PARAMETER_PASS_MALFORMED] = 
                    "Parameter 'pass' is malformed. Should correspond to '^\\w{6,25}$'"
                res[.ERROR_PARAMETER_PASS_MISSING] = 
                    "Parameter 'pass' does not exist."
                return res
            }()
            
            
            static let localErrorReverseLookupTable: [String: LocalCode] = {
                var res: [String: LocalCode] = [:]
                res["ERROR_PARAMETER_PASS_MISSING"] = .ERROR_PARAMETER_PASS_MISSING
                res["ERROR_PARAMETER_PASS_MALFORMED"] = .ERROR_PARAMETER_PASS_MALFORMED
                return res
            }()
            
            
            
            func preHandleLocalError(code: String, _ mmsg: String? = nil) -> Bool {
                guard code == "SUCCESS" else {
                    guard let rcode = password.localErrorReverseLookupTable[code] else {
                        APISupport.handleCommunicationFailure(.ERROR_UNKNOWN_ERROR, emsg: mmsg)
                        return false
                    }
                    handleLocalError(rcode, mmsg)
                    return false
                }
                return true
            }
            
            func handleLocalError(code: LocalCode, _ mmsg: String? = nil) {
                let msg = mmsg ?? password.localErrorMessageTable[code] ?? "No error message defined"
                let handler = self.localErrorMapping[code] ?? self.onUnhandledError
                dispatch_async(dispatch_get_main_queue()) {
                    handler(code, msg)
                }
            }
            
            func validateSimpleResponse(json: [String: AnyObject], _ value: String, _ regex: String, _ misErr: LocalCode, _ malErr: LocalCode ) -> String? {
                if let value = (json as? [String: String])?[value] {
                    if !APISupport.matches(value, re: regex) {
                        handleLocalError(malErr)
                        return nil
                    }
                    else {
                        return value
                    }
                }
                else {
                    handleLocalError(misErr)
                    return nil
                }
            }
            
            func validateSimpleArrayResponse(json: [String: AnyObject], _ value: String, _ regex: String, _ misErr: LocalCode, _ malErr: LocalCode ) -> [String]? {
                if let values = (json as? [String: [String!]])?[value] {
                    var res: [String] = []
                    for value in values {
                        if !APISupport.matches(value, re: regex) {
                            handleLocalError(malErr)
                            return nil
                        }
                        else {
                            res.append(value)
                        }
                    }
                    return res
                }
                else {
                    handleLocalError(misErr)
                    return nil
                }
            }
            
            
            
            func perform(and: ()->()) {
                APISupport.performNetworkRequest(self) { (code, msg, _) in
                    if self.preHandleLocalError(code, msg) {
                        and()
                    }
                }
            }
            func on(code: LocalCode, perform: (LocalCode, String)->()){
                self.localErrorMapping[code] = perform
            }
            
            
            
            
            func validateParameterPairs() -> [String: String]? {
            
                var res: [String: String] = [:]
            
                
                if let pass = parameters.pass {
                    if APISupport.matches(pass, re: "^\\w{6,25}$") {
                        res["pass"] = pass
                    }
                    else {
                        handleLocalError(.ERROR_PARAMETER_PASS_MALFORMED)
                        return nil
                    }
                }
                else {
                    handleLocalError(.ERROR_PARAMETER_PASS_MISSING)
                    return nil
                }
            
                return res
            }
            
            
            
            
        }
        
        class sns_unlink: APIRequestProtocol {
            let apipath = "/post/sns_unlink"
            
            class InternalParameterClass {
                var provider: String?
                var token: String?
                
            }
            
            let parameters = InternalParameterClass()
            
            
            var localErrorMapping: [LocalCode: (LocalCode, String)->()] = [:]
            
            var onUnhandledError: (LocalCode, String)->() = { print("FATAL: UNHANDLED API ERROR: \($0): \($1)") }
            
            enum LocalCode {
                case ERROR_SNS_PROVIDER_TOKEN_NOT_VALID
                case ERROR_PROVIDER_UNREACHABLE
                case ERROR_PARAMETER_PROVIDER_MISSING
                case ERROR_PARAMETER_PROVIDER_MALFORMED
                case ERROR_PARAMETER_TOKEN_MISSING
                case ERROR_PARAMETER_TOKEN_MALFORMED
            }
            
            
            static let localErrorMessageTable: [LocalCode: String] = {
                var res: [LocalCode: String] = [:]
                res[.ERROR_PARAMETER_TOKEN_MALFORMED] = 
                    "Parameter 'token' is malformed. Should correspond to '^\\S{20,4000}$'"
                res[.ERROR_SNS_PROVIDER_TOKEN_NOT_VALID] = 
                    "The provided sns token is invalid or has expired"
                res[.ERROR_PARAMETER_PROVIDER_MISSING] = 
                    "Parameter 'provider' does not exist."
                res[.ERROR_PARAMETER_PROVIDER_MALFORMED] = 
                    "Parameter 'provider' is malformed. Should correspond to '^(api.twitter.com)|(graph.facebook.com)$'"
                res[.ERROR_PROVIDER_UNREACHABLE] = 
                    "The providers server infrastructure appears to be down"
                res[.ERROR_PARAMETER_TOKEN_MISSING] = 
                    "Parameter 'token' does not exist."
                return res
            }()
            
            
            static let localErrorReverseLookupTable: [String: LocalCode] = {
                var res: [String: LocalCode] = [:]
                res["ERROR_SNS_PROVIDER_TOKEN_NOT_VALID"] = .ERROR_SNS_PROVIDER_TOKEN_NOT_VALID
                res["ERROR_PROVIDER_UNREACHABLE"] = .ERROR_PROVIDER_UNREACHABLE
                res["ERROR_PARAMETER_PROVIDER_MISSING"] = .ERROR_PARAMETER_PROVIDER_MISSING
                res["ERROR_PARAMETER_PROVIDER_MALFORMED"] = .ERROR_PARAMETER_PROVIDER_MALFORMED
                res["ERROR_PARAMETER_TOKEN_MISSING"] = .ERROR_PARAMETER_TOKEN_MISSING
                res["ERROR_PARAMETER_TOKEN_MALFORMED"] = .ERROR_PARAMETER_TOKEN_MALFORMED
                return res
            }()
            
            
            
            func preHandleLocalError(code: String, _ mmsg: String? = nil) -> Bool {
                guard code == "SUCCESS" else {
                    guard let rcode = sns_unlink.localErrorReverseLookupTable[code] else {
                        APISupport.handleCommunicationFailure(.ERROR_UNKNOWN_ERROR, emsg: mmsg)
                        return false
                    }
                    handleLocalError(rcode, mmsg)
                    return false
                }
                return true
            }
            
            func handleLocalError(code: LocalCode, _ mmsg: String? = nil) {
                let msg = mmsg ?? sns_unlink.localErrorMessageTable[code] ?? "No error message defined"
                let handler = self.localErrorMapping[code] ?? self.onUnhandledError
                dispatch_async(dispatch_get_main_queue()) {
                    handler(code, msg)
                }
            }
            
            func validateSimpleResponse(json: [String: AnyObject], _ value: String, _ regex: String, _ misErr: LocalCode, _ malErr: LocalCode ) -> String? {
                if let value = (json as? [String: String])?[value] {
                    if !APISupport.matches(value, re: regex) {
                        handleLocalError(malErr)
                        return nil
                    }
                    else {
                        return value
                    }
                }
                else {
                    handleLocalError(misErr)
                    return nil
                }
            }
            
            func validateSimpleArrayResponse(json: [String: AnyObject], _ value: String, _ regex: String, _ misErr: LocalCode, _ malErr: LocalCode ) -> [String]? {
                if let values = (json as? [String: [String!]])?[value] {
                    var res: [String] = []
                    for value in values {
                        if !APISupport.matches(value, re: regex) {
                            handleLocalError(malErr)
                            return nil
                        }
                        else {
                            res.append(value)
                        }
                    }
                    return res
                }
                else {
                    handleLocalError(misErr)
                    return nil
                }
            }
            
            
            
            func perform(and: ()->()) {
                APISupport.performNetworkRequest(self) { (code, msg, _) in
                    if self.preHandleLocalError(code, msg) {
                        and()
                    }
                }
            }
            func on(code: LocalCode, perform: (LocalCode, String)->()){
                self.localErrorMapping[code] = perform
            }
            
            
            func on_ERROR_SNS_PROVIDER_TOKEN_NOT_VALID(perform:(LocalCode, String)->()) {
                localErrorMapping[.ERROR_SNS_PROVIDER_TOKEN_NOT_VALID] = perform
            }
            func on_ERROR_PROVIDER_UNREACHABLE(perform:(LocalCode, String)->()) {
                localErrorMapping[.ERROR_PROVIDER_UNREACHABLE] = perform
            }
            
            
            func validateParameterPairs() -> [String: String]? {
            
                var res: [String: String] = [:]
            
                
                if let provider = parameters.provider {
                    if APISupport.matches(provider, re: "^(api.twitter.com)|(graph.facebook.com)$") {
                        res["provider"] = provider
                    }
                    else {
                        handleLocalError(.ERROR_PARAMETER_PROVIDER_MALFORMED)
                        return nil
                    }
                }
                else {
                    handleLocalError(.ERROR_PARAMETER_PROVIDER_MISSING)
                    return nil
                }
                
                if let token = parameters.token {
                    if APISupport.matches(token, re: "^\\S{20,4000}$") {
                        res["token"] = token
                    }
                    else {
                        handleLocalError(.ERROR_PARAMETER_TOKEN_MALFORMED)
                        return nil
                    }
                }
                else {
                    handleLocalError(.ERROR_PARAMETER_TOKEN_MISSING)
                    return nil
                }
            
                return res
            }
            
            
            
            
        }
        
     }
    
    
    
}

